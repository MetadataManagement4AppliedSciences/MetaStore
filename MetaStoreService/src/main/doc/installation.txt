MetaStore Service
=================
Contact <support@datamanager.kit.edu>
:toc: left
:toclevels: 3
:iconsdir: ./icons
:icons: font
:max-width: 90em
:author:    KIT Data Manager Dev Team
:email:     support@datamanager.kit.edu
:revdate:   ${datestamp}
:revnumber: ${project.version}
:website: http://datamanager.kit.edu/index.php/kit-data-manager

.Preliminary Remarks
**********************************************************************
If you are struggling with the terms

- KIT Data Manager
- Repository
- Digital Object

please read the documentation of the http://datamanager.kit.edu/dama/manual/[KIT Data Manager] first.
**********************************************************************

== MetaStore Service 

.Requirements
**********************************************************************
. JDK 1.8
. Maven 1.3
. KIT Data Manager 1.5 or higher
. ArangoDB 3.1 or higher
**********************************************************************

=== About this documentation
This documentation includes the MetaStore as a part of a repository powered by KIT Data Manager, its installation and configuration.



=== The MetaStore Service
The MetaStore service extends the core KIT DM by the following features

- Registration of XML Schema
- Validation of XML with registered XML Schema
- Storing metadata (METS format)
- Updating metadata
- Searching for metadata via the Generic Repository Client of the KIT DM or the MetaStore REST-API
- Publish a digital object (create a PID)
- Providing a REST-API for the MetaStore functionality that is fully integrated with the KIT DM REST-API (http://ipelsdf1.lsdf.kit.edu/masi/MetaStore/swagger/[MetaStore REST-API Documentation])

==== Structure
Metadata is extracted from a digital object during ingest. The metadata is stored in the standard http://www.loc.gov/standards/mets/[METS format] that describes all aspects of a digital object with for example the following categories:

- Base metadata
- Content metadata
- Structural metadata
- Preservation metadata including provenance

As the METS format necessitates XML, all metadata is transformed to it.

==== Content Metadata Extraction and Validation
As the content metadata depends on the specific data of the community, the automatic metadata extraction needs to be specified for each use case. Therefor a http://datamanager.kit.edu/dama/manual/#ChapterStagingProcessorCoding[staging processor] has to be implemented. It is advised to utilize existing staging processors and/or libraries as a basis. Generic extractors for common use cases were implemented. Following the extraction of the community specific content metadata, the metadata is stored in an XML schema that is required to be definied. Existing schemas as advised to be used. To enable the validation of such an XML schema, it has to be registered with the MetaStore. Then, during ingest of a digital object when the metadata is extracted and stored in the MetaStore, validation of the metadata is performed. If the validation fails (e.g. due to a missing XML schema or invalid content) the MetaStore rejects the metadata and, thus, the whole data ingest. 

For a new use case data set, the integration workflow is as follows:

1. Defining what constitutes a digital object for the data set
2. Specifying the content metadata for the digital object and a fitting XML metadata schema
3. Implementing the staging processor to automatically extract metadata
4. Finding out if existing metadata schemas, staging processors and libraries can be reused 
5. Registering the XML schema with the MetaStore

The MetaStore can also be utilized as a standalone service.


==== PID Creator

ClassName :: edu.kit.masi.staging.pid.PidCreator

This staging processor allows you to automatically register a PID for ingested data. The configuration of the service is done via 'datamanager.xml'. To configure the processors please also refer to http://datamanager.kit.edu/dama/manual/#ChapterStagingProcessorConfiguration[Configure Staging Processor]


===== Configuration
To configure it like the example above it has to look like this:

====== Page 1:

ACCESSIBLE BY :: community 
PRIORITY :: 0

====== General Options:

Default :: ON
Disabled :: OFF
Ingest Supported :: ON
Download Supported :: OFF

====== Page 2:

PID service :: EPIC



=== Installation of ArangoDB
An example of installing ArangoDB on an Ubuntu operating system you'll find here: https://www.arangodb.com/download-major/ubuntu/[Installing ArangoDB on Ubuntu]

In the last step you have to provide a password for the database. Please note this password. If no additional user will be created you may access the database via username 'root' and the provided password.



=== Installation MetaStore
1. Install ${artifactId} module as part of KIT Data Manager.
A. Unzip _'${artifactId}-${project.version}-kitdm.zip'_ at *_'KITDM_LOCATION'_*. 
B. Remove MDM-Content-1.5.jar from KITDM/WEB-INF/lib directory
C. Create hard links of all jar files to lib directory
a. Type 'ln KITDM/WEB-INF/lib/${libFolder}/*.jar KITDM/WEB-INF/lib'
D. Fill in the ArangoDB database settings at KITDM/WEB-INF/classes/DatabaseProperties.properties.
E. Adapt KITDM/WEB-INF/web.xml
a. Insert the sections 'listener' and 'context-param' for the initialization of the MetaStore from web_metastore.xml into web.xml
b. Copy all default XSD files of the metadata schema you want to add to KITDM/WEB-INF/classes/xsd (OPTIONAL).
* Accordingly, adapt/extend context-param initMetaStore (comma separated list with prefix:filename)
F. Insert the sections 'servlet' and 'servlet-mapping' from web_metastore.xml into web.xml
G. Insert section 'module' from KITDM/WEB-INF/classes/datamanager_EPIC.xml into KITDM/WEB-INF/classes/datamanager.xml
a. Adapt the settings of the added section to configure the fetching of DOIs via ePIC/handle.
H. Insert marked line from KITDM/WEB-INF/classes/META-INF/persistence_pid.xml into KITDM/WEB-INF/classes/META-INF/persistence.xml
I. To avoid access problems make all file accessible by tomcat (e.g.: chown -R tomcat7:tomcat7 *_'KITDM_LOCATION'_*)
J. Check and/or adapt database content:
[source,sh]
--------------------------------------
/home/kitdm$sudo -u postgres psql -d datamanager
[sudo] password for kitdm: 
psql (9.5.5)
Type "help" for help.

datamanager=# select * from metadataschema;
 id |                           metadataschemaurl        | schemaidentifier |                    namespace                     
----+----------------------------------------------------+------------------+--------------------------------------------------
  1 |                                                    | bmd              | http://datamanager.kit.edu/dama/basemetadata
  2 |                                                    | do               | http://datamanager.kit.edu/dama/dataorganization
  3 | http://www.loc.gov/standards/mets/mets.xsd         | mets             | http://www.loc.gov/METS/
  4 | http://www.openarchives.org/OAI/2.0/oai_dc.xsd     | oai_dc           | http://www.openarchives.org/OAI/2.0/oai_dc/
  5 | http://www.corpusvitrearum.de/cvma/1.1/            | cvma             | https://lod.academy/cvma/ns/xmp/
  6 |                                                    | chem             | http://datamanager.kit.edu/masi/chem/1.0
(6 rows)
--------------------------------------

If there is already a schemaidentifier 'bmd' defined with a trailing '/' in the 
namespace this has to be updated like this:

[source,sh]
--------------------------------------
datamanager=# update metadataschema set schemaidentifier='bmd_old' where schemaidentifier='bmd';
UPDATE 1
--------------------------------------

Also check the schemaidentifier 'dc'. The namespace of this schema may not be equal
to the one defined by 'oai_dc'. (This may happen if KIT Data Manager is updated
from an older version)
Otherwise the schemaidentifier has to be changed:

[source,sh]
--------------------------------------
datamanager=# update metadataschema set schemaidentifier='oai_dc' where schemaidentifier='dc';
UPDATE 1
--------------------------------------
[start=2]
2. Restart tomcat

That's it. Please install and configure the additional metadata extractors needed.
(MDM-MasiProcessors and/or MDM-CVMA)

